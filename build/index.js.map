{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AAC2E;;AAE3E;AACA;AACA;AACA;AACA;AACA;AAC8E;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASM,IAAIA,CAAC;EAAEC,UAAU;EAAEC;AAAc,CAAC,EAAE;EAC3D,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACvD,MAAM;IAAEC,gBAAgB;IAAEC;EAAa,CAAC,GAAGP,UAAU;;EAErD;EACA,IAAIQ,WAAW;EAEZ,IAAKF,gBAAgB,IAAIC,YAAY,EAAG;IAChCC,WAAW,GAAGD,YAAY,GAAG,GAAG,GAAGL,WAAW;EACtD,CAAC,MAAM;IACHM,WAAW,GAAGN,WAAW;EAC7B;;EAEH;EACA,OACCO,oDAAA,CAAAC,2CAAA,QACUD,oDAAA,CAACf,sEAAiB,QAC1Be,oDAAA,CAACb,4DAAS;IAACe,KAAK,EAAGlB,mDAAE,CAAE,UAAU,EAAE,sBAAuB;EAAG,GAC5DgB,oDAAA,CAACX,gEAAa;IACKc,OAAO,EAAG,CAAC,CAAEN,gBAAkB;IAC/BO,KAAK,EAAGpB,mDAAE,CACN,oBAAoB,EACpB,sBACJ,CAAG;IACHqB,QAAQ,EAAGA,CAAA,KACPb,aAAa,CAAE;MACXK,gBAAgB,EAAE,CAAEA;IACxB,CAAE;EACL,CACJ,CAAC,EACAA,gBAAgB,IACdG,oDAAA,CAACZ,8DAAW;IACRgB,KAAK,EAAGpB,mDAAE,CACN,eAAe,EACf,sBACJ,CAAG;IACHsB,KAAK,EAAGR,YAAY,IAAI,EAAI;IAC5BO,QAAQ,EAAKC,KAAK,IACdd,aAAa,CAAE;MAAEM,YAAY,EAAEQ;IAAM,CAAE;EAC1C,CACJ,CAEE,CACI,CAAC,EACpBN,oDAAA;IAAA,GAAQd,sEAAa,CAAC;EAAC,GAAG,OAAE,EAAEa,WAAgB,CAChD,CAAC;AAEX;;;;;;;;;;AC9EA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACsD;;AAEtD;AACA;AACA;AAC0B;AACU;AAEpC,MAAMU,YAAY,GACdT,oDAAA;EACIU,OAAO,EAAC,WAAW;EACnBC,KAAK,EAAC,4BAA4B;EAClC,eAAY,MAAM;EAClBC,SAAS,EAAC;AAAO,GAEjBZ,oDAAA;EAAMa,CAAC,EAAC;AAA0N,CAAO,CACxO,CACR;;AAED;AACA;AACA;AACA;AACA;AACAN,oEAAiB,CAAEC,6CAAa,EAAE;EACjC;AACD;AACA;EACCO,IAAI,EAAEzB,6CAAI;EACV0B,IAAI,EAAEP,YAAY;EAClBQ,IAAI,EAAEA,CAAA,KAAM;IACX,OAAO,IAAI;EACZ;AACD,CAAE,CAAC,C","sources":["webpack://copyright-date-block/./src/edit.js","webpack://copyright-date-block/external window \"React\"","webpack://copyright-date-block/external window [\"wp\",\"blockEditor\"]","webpack://copyright-date-block/external window [\"wp\",\"blocks\"]","webpack://copyright-date-block/external window [\"wp\",\"components\"]","webpack://copyright-date-block/external window [\"wp\",\"i18n\"]","webpack://copyright-date-block/webpack/bootstrap","webpack://copyright-date-block/webpack/runtime/compat get default export","webpack://copyright-date-block/webpack/runtime/define property getters","webpack://copyright-date-block/webpack/runtime/hasOwnProperty shorthand","webpack://copyright-date-block/webpack/runtime/make namespace object","webpack://copyright-date-block/./src/index.js"],"sourcesContent":["/**\n * Retrieves the translation of text.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops\n */\nimport { InspectorControls, useBlockProps } from '@wordpress/block-editor';\n\n/**\n * The edit function describes the structure of your block in the context of the\n * PanelBody: This is a component that creates a collapsible panel. It's often used in the sidebar of the block editor for block settings.\n * TextControl: This is a form input component that allows users to enter text. It's often used for settings that require a text input.\n * TextToggleControl: This is a form input component that allows users to toggle a setting on or off. It's often used for settings that are binary or boolean in nature.\n */\nimport { PanelBody, TextControl, ToggleControl } from '@wordpress/components';\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit\n *\n * @return {Element} Element to render.\n */\nexport default function Edit({ attributes, setAttributes }) {\n\tconst currentYear = new Date().getFullYear().toString();\n\tconst { showStartingYear, startingYear } = attributes;\n\n\t// Set the display date\n\tlet displayDate;\n\n    if ( showStartingYear && startingYear ) {\n            displayDate = startingYear + '–' + currentYear;\n    } else {\n        displayDate = currentYear;\n    }\n\n\t// Return the output in the editor\n\treturn (\n\t\t<>\n            <InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Settings', 'copyright-date-block' ) }>\n\t\t\t\t\t<ToggleControl\n                        checked={ !! showStartingYear }\n                        label={ __(\n                            'Show starting year',\n                            'copyright-date-block'\n                        ) }\n                        onChange={ () =>\n                            setAttributes( {\n                                showStartingYear: ! showStartingYear,\n                            } )\n                        }\n                    />\n                    { showStartingYear && (\n                        <TextControl\n                            label={ __(\n                                'Starting year',\n                                'copyright-date-block'\n                            ) }\n                            value={ startingYear || '' }\n                            onChange={ ( value ) =>\n                                setAttributes( { startingYear: value } )\n                            }\n                        />\n                    ) }\n                </PanelBody>\n            </InspectorControls>\n            <p { ...useBlockProps() }>© { displayDate }</p>\n        </>\n\t);\n}\n","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"i18n\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport Edit from './edit';\nimport metadata from './block.json';\n\nconst calendarIcon = (\n    <svg\n        viewBox=\"0 0 24 24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        aria-hidden=\"true\"\n        focusable=\"false\"\n    >\n        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 16c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V7h15v12zM9 10H7v2h2v-2zm0 4H7v2h2v-2zm4-4h-2v2h2v-2zm4 0h-2v2h2v-2zm-4 4h-2v2h2v-2zm4 0h-2v2h2v-2z\"></path>\n    </svg>\n);\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/\n */\nregisterBlockType( metadata.name, {\n\t/**\n\t * @see ./edit.js\n\t */\n\tedit: Edit,\n\ticon: calendarIcon,\n\tsave: () => {\n\t\treturn null;\n\t}\n} );\n"],"names":["__","InspectorControls","useBlockProps","PanelBody","TextControl","ToggleControl","Edit","attributes","setAttributes","currentYear","Date","getFullYear","toString","showStartingYear","startingYear","displayDate","createElement","Fragment","title","checked","label","onChange","value","registerBlockType","metadata","calendarIcon","viewBox","xmlns","focusable","d","name","edit","icon","save"],"sourceRoot":""}